version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
      - echo Installing Trivy for security scanning...
      - |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update
        apt-get install -y trivy
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - |
        if [ "$IMAGE_TAG" = "COMMIT_HASH" ]; then
          IMAGE_TAG=$COMMIT_HASH
        else
          IMAGE_TAG=${IMAGE_TAG:-$COMMIT_HASH}
        fi
      - echo Build started on `date`
      - echo Building Docker image with tag $IMAGE_TAG...

  build:
    commands:
      - echo Building the Docker image...
      - cd 03-CICD-APP-DEPLOYMENT/sample-app
      - docker build -t $ECR_REPOSITORY_URI:latest .
      - docker tag $ECR_REPOSITORY_URI:latest $ECR_REPOSITORY_URI:$IMAGE_TAG
      - docker tag $ECR_REPOSITORY_URI:latest $ECR_REPOSITORY_URI:$COMMIT_HASH

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Scanning image for vulnerabilities...
      - |
        trivy image --severity HIGH,CRITICAL --exit-code 0 $ECR_REPOSITORY_URI:latest || {
          echo "Security scan found HIGH or CRITICAL vulnerabilities!"
          echo "Continuing build - vulnerabilities will be addressed in future iterations."
        }
      - echo Security scan completed!
      - echo Pushing Docker images to ECR...
      - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
      - docker push $ECR_REPOSITORY_URI:$COMMIT_HASH
      - echo Docker images pushed successfully
      - echo Writing image definitions file...
      - printf '[{"name":"sample-app","imageUri":"%s"}]' $ECR_REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo "Build complete! Image pushed with tags:"
      - echo "  - $IMAGE_TAG"
      - echo "  - $COMMIT_HASH"
      - echo ""
      - echo "Updating Helm values with new image tag..."
      - |
        # Use absolute paths from CODEBUILD_SRC_DIR for reliability
        HELM_VALUES_FILE="$CODEBUILD_SRC_DIR/02-HELM-GITOPS/helm-charts/nodejs-chart/values/dev.yaml"
        
        # Verify file exists before updating
        if [ ! -f "$HELM_VALUES_FILE" ]; then
          echo "Error: Helm values file not found at $HELM_VALUES_FILE"
          exit 1
        fi
        
        # Update CI/CD development values (nodejs-chart)
        sed -i "s|tag: \".*\"|tag: \"$IMAGE_TAG\"|g" "$HELM_VALUES_FILE"
        
        # Update CI/CD production values (optional - for auto-deploy to prod)
        # PROD_VALUES_FILE="$CODEBUILD_SRC_DIR/02-HELM-GITOPS/helm-charts/nodejs-chart/values/prod.yaml"
        # sed -i "s|tag: \".*\"|tag: \"$IMAGE_TAG\"|g" "$PROD_VALUES_FILE"
        
        echo "Helm values updated with tag: $IMAGE_TAG"
        echo "Updated file: $HELM_VALUES_FILE"
        
        # Commit and push the updated values to trigger ArgoCD sync
        git config --global user.email "codebuild@example.com"
        git config --global user.name "AWS CodeBuild"
        git add "$HELM_VALUES_FILE"
        git commit -m "Update CI/CD image tag to $IMAGE_TAG for app-cicd-dev deployment"
        
        # Configure git to use token for authentication
        # CodeBuild automatically resolves SECRETS_MANAGER ARN to the actual token value
        git config --global credential.helper store
        echo "https://$GITHUB_TOKEN@github.com" > ~/.git-credentials
        echo "Attempting git push..."
        git push origin main
        echo "Git push completed with exit code: $?"

artifacts:
  files:
    - imagedefinitions.json