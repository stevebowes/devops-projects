# External Secrets Operator Installation Commands
# NOTE: This file contains the installation commands from the guide
# These are shell commands, not Kubernetes YAML manifests

# Add External Secrets Helm repository
# helm repo add external-secrets https://charts.external-secrets.io
# helm repo update

# Install External Secrets Operator
# helm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace --set installCRDs=true --wait

# Verify installation
# kubectl get pods -n external-secrets -l app.kubernetes.io/name=external-secrets

# Configure IRSA for External Secrets Operator (using Terraform outputs from Project 1)
# source .env  # Load environment variables from Project 1
# kubectl annotate serviceaccount external-secrets -n external-secrets eks.amazonaws.com/role-arn=${EXTERNAL_SECRETS_ROLE_ARN} --overwrite
# kubectl rollout restart deployment external-secrets -n external-secrets
# kubectl rollout restart deployment external-secrets-cert-controller -n external-secrets
# kubectl rollout restart deployment external-secrets-webhook -n external-secrets

# Populate secrets in AWS Secrets Manager (secrets already created by Terraform)
# aws secretsmanager put-secret-value --secret-id "dev/app/config" --secret-string '{"DATABASE_URL":"postgresql://dev-db-host:5432/dev-database","API_KEY":"dev-api-key-12345"}'
# aws secretsmanager put-secret-value --secret-id "prod/app/config" --secret-string '{"DATABASE_URL":"postgresql://prod-db-host:5432/prod-database","API_KEY":"prod-api-key-67890"}'

# Apply External Secrets configuration files
# kubectl apply -f gitops-configs/external-secrets/clustersecretstore.yaml
# kubectl apply -f gitops-configs/external-secrets/externalsecret-dev.yaml
# kubectl apply -f gitops-configs/external-secrets/externalsecret-prod.yaml
